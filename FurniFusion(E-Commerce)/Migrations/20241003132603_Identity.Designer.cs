// <auto-generated />
using System;
using System.Collections.Generic;
using FurniFusion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FurniFusion_E_Commerce_.Migrations
{
    [DbContext(typeof(FurniFusionDbContext))]
    [Migration("20241003132603_Identity")]
    partial class Identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FurniFusion.Models.Carrier", b =>
                {
                    b.Property<int>("CarrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("carrier_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarrierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("CarrierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("carrier_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ShippingApi")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shipping_api");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("CarrierId")
                        .HasName("Carrier_pkey");

                    b.HasIndex(new[] { "CarrierName" }, "Carrier_carrier_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "Carrier_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Carrier_phone_key")
                        .IsUnique();

                    b.ToTable("Carrier", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("CategoryId")
                        .HasName("Category_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "CategoryName" }, "Category_category_name_key")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.CategoryChangeLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ActionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("action_type")
                        .HasDefaultValueSql("'UPDATE'::character varying");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("NewCategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("new_category_name");

                    b.Property<string>("OldCategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("old_category_name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("LogId")
                        .HasName("Category_Change_Log_pkey");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Category_Change_Log", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("discount_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discount_code");

                    b.Property<int?>("DiscountUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("discount_unit_id");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<decimal?>("MaxAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("max_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateOnly>("ValidFrom")
                        .HasColumnType("date")
                        .HasColumnName("valid_from");

                    b.Property<DateOnly>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("valid_to");

                    b.HasKey("DiscountId")
                        .HasName("Discount_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DiscountUnitId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "DiscountCode" }, "Discount_discount_code_key")
                        .IsUnique();

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.DiscountChangeLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ActionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("action_type")
                        .HasDefaultValueSql("'UPDATE'::character varying");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DiscountId")
                        .HasColumnType("integer")
                        .HasColumnName("discount_id");

                    b.Property<string>("NewDiscountCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("new_discount_code");

                    b.Property<int?>("NewDiscountUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("new_discount_unit_id");

                    b.Property<decimal?>("NewDiscountValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("new_discount_value");

                    b.Property<string>("OldDiscountCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("old_discount_code");

                    b.Property<int?>("OldDiscountUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("old_discount_unit_id");

                    b.Property<decimal?>("OldDiscountValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("old_discount_value");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("LogId")
                        .HasName("Discount_Change_Log_pkey");

                    b.HasIndex("DiscountId");

                    b.HasIndex("NewDiscountUnitId");

                    b.HasIndex("OldDiscountUnitId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Discount_Change_Log", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.DiscountUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitId"));

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unit_name");

                    b.HasKey("UnitId")
                        .HasName("Discount_Unit_pkey");

                    b.HasIndex(new[] { "UnitName" }, "Discount_Unit_unit_name_key")
                        .IsUnique();

                    b.ToTable("Discount_Unit", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InventoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("WarehouseLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("warehouse_location");

                    b.HasKey("InventoryId")
                        .HasName("Inventory_pkey");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.InventoryProduct", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("integer")
                        .HasColumnName("inventory_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("InventoryId", "ProductId")
                        .HasName("Inventory_Products_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventory_Products", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("AddressToDeliver")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address_to_deliver");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer")
                        .HasColumnName("discount_id");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<int?>("ShippingId")
                        .HasColumnType("integer")
                        .HasColumnName("shipping_id");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShippingId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.OrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("ItemId")
                        .HasName("Order_Item_pkey");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Item", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.OrderStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId")
                        .HasName("Order_Status_pkey");

                    b.HasIndex(new[] { "StatusName" }, "Order_Status_status_name_key")
                        .IsUnique();

                    b.ToTable("Order_Status", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_status_id");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("transaction_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("Payment_pkey");

                    b.HasIndex("PaymentMethod");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TransactionId" }, "Payment_transaction_id_key")
                        .IsUnique();

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.PaymentMethod", b =>
                {
                    b.Property<int>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("method_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MethodId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("method_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("MethodId")
                        .HasName("Payment_Method_pkey");

                    b.HasIndex(new[] { "MethodName" }, "Payment_Method_method_name_key")
                        .IsUnique();

                    b.ToTable("Payment_Method", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.PaymentStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId")
                        .HasName("Payment_Status_pkey");

                    b.HasIndex(new[] { "StatusName" }, "Payment_Status_status_name_key")
                        .IsUnique();

                    b.ToTable("Payment_Status", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<decimal?>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(1, 2)
                        .HasColumnType("numeric(1,2)")
                        .HasColumnName("average_rating")
                        .HasDefaultValueSql("0.00");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<List<string>>("Colors")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasColumnName("colors")
                        .HasDefaultValueSql("'{}'::text[]");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Dimensions")
                        .HasColumnType("jsonb")
                        .HasColumnName("dimensions");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer")
                        .HasColumnName("discount_id");

                    b.Property<List<string>>("ImageUrls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text[]")
                        .HasColumnName("image_urls")
                        .HasDefaultValueSql("'{}'::text[]");

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_available");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("product_name");

                    b.Property<int?>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("weight")
                        .HasDefaultValueSql("0.00");

                    b.HasKey("ProductId")
                        .HasName("Product_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.ProductChangeLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LogId"));

                    b.Property<string>("ActionType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("action_type")
                        .HasDefaultValueSql("'UPDATE'::character varying");

                    b.Property<DateTime?>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("changed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<List<string>>("NewColors")
                        .HasColumnType("text[]")
                        .HasColumnName("new_colors");

                    b.Property<string>("NewDescription")
                        .HasColumnType("text")
                        .HasColumnName("new_description");

                    b.Property<string>("NewDimensions")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_dimensions");

                    b.Property<List<string>>("NewImageUrls")
                        .HasColumnType("text[]")
                        .HasColumnName("new_image_urls");

                    b.Property<bool?>("NewIsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("new_is_available");

                    b.Property<decimal?>("NewPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("new_price");

                    b.Property<string>("NewProductName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("new_product_name");

                    b.Property<int?>("NewStockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("new_stock_quantity");

                    b.Property<decimal?>("NewWeight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("new_weight");

                    b.Property<List<string>>("OldColors")
                        .HasColumnType("text[]")
                        .HasColumnName("old_colors");

                    b.Property<string>("OldDescription")
                        .HasColumnType("text")
                        .HasColumnName("old_description");

                    b.Property<string>("OldDimensions")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_dimensions");

                    b.Property<List<string>>("OldImageUrls")
                        .HasColumnType("text[]")
                        .HasColumnName("old_image_urls");

                    b.Property<bool?>("OldIsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("old_is_available");

                    b.Property<decimal?>("OldPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("old_price");

                    b.Property<string>("OldProductName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("old_product_name");

                    b.Property<int?>("OldStockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("old_stock_quantity");

                    b.Property<decimal?>("OldWeight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("old_weight");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("LogId")
                        .HasName("Product_Change_Log_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Product_Change_Log", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.ProductReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("review_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text")
                        .HasColumnName("review_text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("Product_Review_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Product_Review", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Shipping", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("shipping_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShippingId"));

                    b.Property<int?>("CarrierId")
                        .HasColumnType("integer")
                        .HasColumnName("carrier_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("EstimatedDeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("estimated_delivery_date");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("shipping_cost");

                    b.Property<DateOnly>("ShippingDate")
                        .HasColumnType("date")
                        .HasColumnName("shipping_date");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("shipping_method");

                    b.Property<int?>("ShippingStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("shipping_status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ShippingId")
                        .HasName("Shipping_pkey");

                    b.HasIndex("CarrierId");

                    b.HasIndex("ShippingStatusId");

                    b.ToTable("Shipping", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.ShippingStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status_name");

                    b.HasKey("StatusId")
                        .HasName("Shipping_Status_pkey");

                    b.HasIndex(new[] { "StatusName" }, "Shipping_Status_status_name_key")
                        .IsUnique();

                    b.ToTable("Shipping_Status", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cart_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("CartId")
                        .HasName("Shopping_Cart_pkey");

                    b.HasIndex(new[] { "UserId" }, "Shopping_Cart_user_id_key")
                        .IsUnique();

                    b.ToTable("Shopping_Cart", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("integer")
                        .HasColumnName("cart_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.HasKey("CartId", "ProductId")
                        .HasName("Shopping_Cart_Items_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("Shopping_Cart_Items", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Email" }, "User_email_key")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.UserAddress", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<bool>("IsPrimaryAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "IsPrimaryAddress")
                        .HasName("User_Address_pkey");

                    b.ToTable("User_Address", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.UserPaymentInfo", b =>
                {
                    b.Property<int>("PaymentInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_info_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentInfoId"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("billing_address");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("card_number");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiry_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentInfoId")
                        .HasName("User_Payment_Info_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("User_Payment_Info", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.UserPhoneNumber", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "PhoneNumber")
                        .HasName("User_Phone_Number_pkey");

                    b.HasIndex(new[] { "PhoneNumber" }, "User_Phone_Number_phone_number_key")
                        .IsUnique();

                    b.ToTable("User_Phone_Number", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("wishlist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WishlistId"));

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("WishlistId")
                        .HasName("Wishlist_pkey");

                    b.HasIndex(new[] { "UserId" }, "Wishlist_user_id_key")
                        .IsUnique();

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.WishlistItem", b =>
                {
                    b.Property<int>("WishlistId")
                        .HasColumnType("integer")
                        .HasColumnName("wishlist_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("WishlistId", "ProductId")
                        .HasName("Wishlist_Items_pkey");

                    b.HasIndex("ProductId");

                    b.ToTable("Wishlist_Items", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddc38528-b933-4803-bf28-0e67afe094aa",
                            Name = "superAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "55f49d87-3fd8-45be-a22b-9b90611036d7",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FurniFusion.Models.Category", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "CreatedByNavigation")
                        .WithMany("CategoryCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("Category_created_by_fkey");

                    b.HasOne("FurniFusion.Models.User", "UpdatedByNavigation")
                        .WithMany("CategoryUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Category_updated_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FurniFusion.Models.CategoryChangeLog", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "UpdatedByNavigation")
                        .WithMany("CategoryChangeLogs")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Category_Change_Log_updated_by_fkey");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FurniFusion.Models.Discount", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "CreatedByNavigation")
                        .WithMany("DiscountCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("Discount_created_by_fkey");

                    b.HasOne("FurniFusion.Models.DiscountUnit", "DiscountUnit")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountUnitId")
                        .HasConstraintName("Discount_discount_unit_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "UpdatedByNavigation")
                        .WithMany("DiscountUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Discount_updated_by_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DiscountUnit");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FurniFusion.Models.DiscountChangeLog", b =>
                {
                    b.HasOne("FurniFusion.Models.Discount", "Discount")
                        .WithMany("DiscountChangeLogs")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("Discount_Change_Log_discount_id_fkey");

                    b.HasOne("FurniFusion.Models.DiscountUnit", "NewDiscountUnit")
                        .WithMany("DiscountChangeLogNewDiscountUnits")
                        .HasForeignKey("NewDiscountUnitId")
                        .HasConstraintName("Discount_Change_Log_new_discount_unit_id_fkey");

                    b.HasOne("FurniFusion.Models.DiscountUnit", "OldDiscountUnit")
                        .WithMany("DiscountChangeLogOldDiscountUnits")
                        .HasForeignKey("OldDiscountUnitId")
                        .HasConstraintName("Discount_Change_Log_old_discount_unit_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "UpdatedByNavigation")
                        .WithMany("DiscountChangeLogs")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Discount_Change_Log_updated_by_fkey");

                    b.Navigation("Discount");

                    b.Navigation("NewDiscountUnit");

                    b.Navigation("OldDiscountUnit");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FurniFusion.Models.InventoryProduct", b =>
                {
                    b.HasOne("FurniFusion.Models.Inventory", "Inventory")
                        .WithMany("InventoryProducts")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Inventory_Products_inventory_id_fkey");

                    b.HasOne("FurniFusion.Models.Product", "Product")
                        .WithMany("InventoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Inventory_Products_product_id_fkey");

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurniFusion.Models.Order", b =>
                {
                    b.HasOne("FurniFusion.Models.Discount", "Discount")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_discount_id_fkey");

                    b.HasOne("FurniFusion.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_payment_id_fkey");

                    b.HasOne("FurniFusion.Models.Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Order_shipping_id_fkey");

                    b.HasOne("FurniFusion.Models.OrderStatus", "StatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("Status")
                        .HasConstraintName("Order_status_fkey");

                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Order_user_id_fkey");

                    b.Navigation("Discount");

                    b.Navigation("Payment");

                    b.Navigation("Shipping");

                    b.Navigation("StatusNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.OrderItem", b =>
                {
                    b.HasOne("FurniFusion.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Order_Item_order_id_fkey");

                    b.HasOne("FurniFusion.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Order_Item_product_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurniFusion.Models.Payment", b =>
                {
                    b.HasOne("FurniFusion.Models.PaymentMethod", "PaymentMethodNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethod")
                        .HasConstraintName("Payment_payment_method_fkey");

                    b.HasOne("FurniFusion.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("Payment_payment_status_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Payment_user_id_fkey");

                    b.Navigation("PaymentMethodNavigation");

                    b.Navigation("PaymentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.Product", b =>
                {
                    b.HasOne("FurniFusion.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_category_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "CreatedByNavigation")
                        .WithMany("ProductCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("Product_created_by_fkey");

                    b.HasOne("FurniFusion.Models.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_discount_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "UpdatedByNavigation")
                        .WithMany("ProductUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Product_updated_by_fkey");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Discount");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FurniFusion.Models.ProductChangeLog", b =>
                {
                    b.HasOne("FurniFusion.Models.Product", "Product")
                        .WithMany("ProductChangeLogs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Product_Change_Log_product_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "UpdatedByNavigation")
                        .WithMany("ProductChangeLogs")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Product_Change_Log_updated_by_fkey");

                    b.Navigation("Product");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("FurniFusion.Models.ProductReview", b =>
                {
                    b.HasOne("FurniFusion.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Product_Review_product_id_fkey");

                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Product_Review_user_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.Shipping", b =>
                {
                    b.HasOne("FurniFusion.Models.Carrier", "Carrier")
                        .WithMany("Shippings")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Shipping_carrier_id_fkey");

                    b.HasOne("FurniFusion.Models.ShippingStatus", "ShippingStatus")
                        .WithMany("Shippings")
                        .HasForeignKey("ShippingStatusId")
                        .HasConstraintName("Shipping_shipping_status_id_fkey");

                    b.Navigation("Carrier");

                    b.Navigation("ShippingStatus");
                });

            modelBuilder.Entity("FurniFusion.Models.ShoppingCart", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FurniFusion.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Shopping_Cart_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("FurniFusion.Models.ShoppingCart", "Cart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Shopping_Cart_Items_cart_id_fkey");

                    b.HasOne("FurniFusion.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Shopping_Cart_Items_product_id_fkey");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurniFusion.Models.UserAddress", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User_Address_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.UserPaymentInfo", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithMany("UserPaymentInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("User_Payment_Info_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.UserPhoneNumber", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithMany("UserPhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User_Phone_Number_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.Wishlist", b =>
                {
                    b.HasOne("FurniFusion.Models.User", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("FurniFusion.Models.Wishlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Wishlist_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurniFusion.Models.WishlistItem", b =>
                {
                    b.HasOne("FurniFusion.Models.Product", "Product")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Wishlist_Items_product_id_fkey");

                    b.HasOne("FurniFusion.Models.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Wishlist_Items_wishlist_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FurniFusion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FurniFusion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurniFusion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FurniFusion.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FurniFusion.Models.Carrier", b =>
                {
                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("FurniFusion.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FurniFusion.Models.Discount", b =>
                {
                    b.Navigation("DiscountChangeLogs");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FurniFusion.Models.DiscountUnit", b =>
                {
                    b.Navigation("DiscountChangeLogNewDiscountUnits");

                    b.Navigation("DiscountChangeLogOldDiscountUnits");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("FurniFusion.Models.Inventory", b =>
                {
                    b.Navigation("InventoryProducts");
                });

            modelBuilder.Entity("FurniFusion.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FurniFusion.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FurniFusion.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FurniFusion.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FurniFusion.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FurniFusion.Models.Product", b =>
                {
                    b.Navigation("InventoryProducts");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductChangeLogs");

                    b.Navigation("ProductReviews");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("FurniFusion.Models.Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FurniFusion.Models.ShippingStatus", b =>
                {
                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("FurniFusion.Models.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FurniFusion.Models.User", b =>
                {
                    b.Navigation("CategoryChangeLogs");

                    b.Navigation("CategoryCreatedByNavigations");

                    b.Navigation("CategoryUpdatedByNavigations");

                    b.Navigation("DiscountChangeLogs");

                    b.Navigation("DiscountCreatedByNavigations");

                    b.Navigation("DiscountUpdatedByNavigations");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("ProductChangeLogs");

                    b.Navigation("ProductCreatedByNavigations");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductUpdatedByNavigations");

                    b.Navigation("ShoppingCart");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserPaymentInfos");

                    b.Navigation("UserPhoneNumbers");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("FurniFusion.Models.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
